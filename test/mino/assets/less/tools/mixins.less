//------------------------------------\\
//  $MIXINS
//------------------------------------\\
// Mixins ported and trimed from Bootstrap 3.0.1

//
// Contain floats
//
// Make an element expand to contain floated children.
// Uses pseudo-elements (micro clearfix).
//
// 1. The space content is one way to avoid an Opera bug when the
//    `contenteditable` attribute is included anywhere else in the document.
//    Otherwise it causes space to appear at the top and bottom of the
//    element.
// 2. The use of `table` rather than `block` is only necessary if using
//    `:before` to contain the top-margins of child elements.
//
.cf() {
    &:before,
    &:after {
        content: " ";   // [1]
        display: table; // [2]
    }
    &:after { clear: both; }
}

// Webkit-style focus
.tab-focus() {
    // Default
    outline: thin dotted #333;
    // Webkit
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px;
}

// Center-align a block level element
.center-block() {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

// Text overflow
// Requires inline-block or block for proper styling
.text-overflow() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    word-wrap: break-word;
}

// Placeholder text
.placeholder(@color: @base-ui-color) {
    &:-moz-placeholder            { color: @color; } // Safari and Chrome
    &::-moz-placeholder           { color: @color; } // Safari and Chrome
    &:-ms-input-placeholder       { color: @color; } // Safari and Chrome
    &::-webkit-input-placeholder  { color: @color; } // Safari and Chrome
}

// CSS image replacement
//
// Heads up! v3 launched with with only `.hide-text()`, but per our pattern for
// mixins being reused as classes with the same name, this doesn't hold up. As
// of v3.0.1 we have added `.text-hide()` and deprecated `.hide-text()`. Note
// that we cannot chain the mixins together in Less, so they are repeated.
//
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757

// New mixin to use as of v3.0.1
.text-hide() {
    // ** Text ** \\
    font: ~"0/0" a;
    text-shadow: none;
    // ** Decoration ** \\
    background-color: transparent;
    border: 0;
    color: transparent;
}


// CSS3 PROPERTIES
// --------------------------------------------------

// Single side border-radius
.border-top-radius(@radius) {
    border-top-right-radius: @radius;
     border-top-left-radius: @radius;
}
.border-right-radius(@radius) {
    border-bottom-right-radius: @radius;
       border-top-right-radius: @radius;
}
.border-bottom-radius(@radius) {
    border-bottom-right-radius: @radius;
     border-bottom-left-radius: @radius;
}
.border-left-radius(@radius) {
    border-bottom-left-radius: @radius;
       border-top-left-radius: @radius;
}

// Drop shadows
.box-shadow(@shadow) {
    -webkit-box-shadow: @shadow; // iOS <4.3 & Android <4.1
            box-shadow: @shadow;
}

// Transitions
.transition(@transition) {
    -webkit-transition: @transition;
            transition: @transition;
}
.transition-property(@transition-property) {
    -webkit-transition-property: @transition-property;
            transition-property: @transition-property;
}
.transition-delay(@transition-delay) {
    -webkit-transition-delay: @transition-delay;
            transition-delay: @transition-delay;
}
.transition-duration(@transition-duration) {
    -webkit-transition-duration: @transition-duration;
            transition-duration: @transition-duration;
}
.transition-transform(@transition) {
    -webkit-transition: -webkit-transform @transition;
     -moz-transition: -moz-transform @transition;
       -o-transition: -o-transform @transition;
          transition: transform @transition;
}

// Transformations
.rotate(@degrees) {
    -webkit-transform: rotate(@degrees);
        -ms-transform: rotate(@degrees); // IE9+
            transform: rotate(@degrees);
}
.scale(@ratio) {
    -webkit-transform: scale(@ratio);
        -ms-transform: scale(@ratio); // IE9+
            transform: scale(@ratio);
}
.translate(@x; @y) {
    -webkit-transform: translate(@x, @y);
        -ms-transform: translate(@x, @y); // IE9+
            transform: translate(@x, @y);
}
.skew(@x; @y) {
    -webkit-transform: skew(@x, @y);
        -ms-transform: skewX(@x) skewY(@y); // See https://github.com/twbs/bootstrap/issues/4885; IE9+
            transform: skew(@x, @y);
}
.translate3d(@x; @y; @z) {
    -webkit-transform: translate3d(@x, @y, @z);
            transform: translate3d(@x, @y, @z);
}

.rotateX(@degrees) {
    -webkit-transform: rotateX(@degrees);
        -ms-transform: rotateX(@degrees); // IE9+
            transform: rotateX(@degrees);
}
.rotateY(@degrees) {
    -webkit-transform: rotateY(@degrees);
        -ms-transform: rotateY(@degrees); // IE9+
            transform: rotateY(@degrees);
}
.perspective(@perspective) {
    -webkit-perspective: @perspective;
       -moz-perspective: @perspective;
            perspective: @perspective;
}
.perspective-origin(@perspective) {
    -webkit-perspective-origin: @perspective;
       -moz-perspective-origin: @perspective;
            perspective-origin: @perspective;
}
.transform-origin(@origin){
    -webkit-transform-origin: @origin;
       -moz-transform-origin: @origin;
            transform-origin: @origin;
}

// Backface visibility
// Prevent browsers from flickering when using CSS 3D transforms.
// Default value is `visible`, but can be changed to `hidden`
// See git pull https://github.com/dannykeane/bootstrap.git backface-visibility
// for examples
.backface-visibility(@visibility){
    -webkit-backface-visibility: @visibility;
       -moz-backface-visibility: @visibility;
            backface-visibility: @visibility;
}

// Box sizing
.box-sizing(@boxmodel) {
    -webkit-box-sizing: @boxmodel;
       -moz-box-sizing: @boxmodel;
            box-sizing: @boxmodel;
}

// User select
// For selecting text on the page
.user-select(@select) {
    -webkit-user-select: @select;
       -moz-user-select: @select;
        -ms-user-select: @select; // IE10+
         -o-user-select: @select;
            user-select: @select;
}

// Resize anything
.resizable(@direction) {
    resize: @direction; // Options: horizontal, vertical, both
    overflow: auto; // Safari fix
}

// CSS3 Content Columns
.content-columns(@column-count; @column-gap: @grid-gutter-width) {
    -webkit-column-count: @column-count;
       -moz-column-count: @column-count;
            column-count: @column-count;
    -webkit-column-gap: @column-gap;
       -moz-column-gap: @column-gap;
             column-gap: @column-gap;
}

// Optional hyphenation
.hyphens(@mode: auto) {
    word-wrap: break-word;
    -webkit-hyphens: @mode;
       -moz-hyphens: @mode;
        -ms-hyphens: @mode; // IE10+
         -o-hyphens: @mode;
            hyphens: @mode;
}

// Opacity
.opacity(@opacity) {
    opacity: @opacity;
    // IE8 filter
    @opacity-ie: (@opacity * 100);
    filter: ~"alpha(opacity=@{opacity-ie})";
}


// GRADIENTS
// --------------------------------------------------

#gradient {

    // Horizontal gradient, from left to right
    //
    // Creates two color stops, start and end, by specifying a color and
    // position for each color stop.
    //
    // Color stops are not available in IE9 and below.
    .horizontal(@start-color: #555; @end-color: #333; @start-percent: 0%; @end-percent: 100%) {
        background-image: -webkit-gradient(linear, @start-percent top, @end-percent top, from(@start-color), to(@end-color)); // Safari 4+, Chrome 2+
        background-image: -webkit-linear-gradient(left, color-stop(@start-color @start-percent), color-stop(@end-color @end-percent)); // Safari 5.1+, Chrome 10+
        background-image: -moz-linear-gradient(left, @start-color @start-percent, @end-color @end-percent); // FF 3.6+
        background-image:  linear-gradient(to right, @start-color @start-percent, @end-color @end-percent); // Standard, IE10
        background-repeat: repeat-x;
        filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@start-color),argb(@end-color))); // IE9 and down
    }

    // Vertical gradient, from top to bottom
    //
    // Creates two color stops, start and end, by specifying a color and position for each color stop.
    // Color stops are not available in IE9 and below.
    .vertical(@start-color: #555; @end-color: #333; @start-percent: 0%; @end-percent: 100%) {
        background-image: -webkit-gradient(linear, left @start-percent, left @end-percent, from(@start-color), to(@end-color)); // Safari 4+, Chrome 2+
        background-image: -webkit-linear-gradient(top, @start-color, @start-percent, @end-color, @end-percent); // Safari 5.1+, Chrome 10+
        background-image:  -moz-linear-gradient(top, @start-color @start-percent, @end-color @end-percent); // FF 3.6+
        background-image: linear-gradient(to bottom, @start-color @start-percent, @end-color @end-percent); // Standard, IE10
        background-repeat: repeat-x;
        filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color))); // IE9 and down
    }

    .directional(@start-color: #555; @end-color: #333; @deg: 45deg) {
        background-repeat: repeat-x;
        background-image: -webkit-linear-gradient(@deg, @start-color, @end-color); // Safari 5.1+, Chrome 10+
        background-image: -moz-linear-gradient(@deg, @start-color, @end-color); // FF 3.6+
        background-image: linear-gradient(@deg, @start-color, @end-color); // Standard, IE10
    }
    .horizontal-three-colors(@start-color: #00b3ee; @mid-color: #7a43b6; @color-stop: 50%; @end-color: #c3325f) {
        background-image: -webkit-gradient(left, linear, 0 0, 0 100%, from(@start-color), color-stop(@color-stop, @mid-color), to(@end-color));
        background-image: -webkit-linear-gradient(left, @start-color, @mid-color @color-stop, @end-color);
        background-image: -moz-linear-gradient(left, @start-color, @mid-color @color-stop, @end-color);
        background-image: linear-gradient(to right, @start-color, @mid-color @color-stop, @end-color);
        background-repeat: no-repeat;
        filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@start-color),argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback
    }
    .vertical-three-colors(@start-color: #00b3ee; @mid-color: #7a43b6; @color-stop: 50%; @end-color: #c3325f) {
        background-image: -webkit-gradient(linear, 0 0, 0 100%, from(@start-color), color-stop(@color-stop, @mid-color), to(@end-color));
        background-image: -webkit-linear-gradient(@start-color, @mid-color @color-stop, @end-color);
        background-image: -moz-linear-gradient(top, @start-color, @mid-color @color-stop, @end-color);
        background-image: linear-gradient(@start-color, @mid-color @color-stop, @end-color);
        background-repeat: no-repeat;
        filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback
    }
    .radial(@inner-color: #555; @outer-color: #333) {
        background-image: -webkit-gradient(radial, center center, 0, center center, 460, from(@inner-color), to(@outer-color));
        background-image: -webkit-radial-gradient(circle, @inner-color, @outer-color);
        background-image: -moz-radial-gradient(circle, @inner-color, @outer-color);
        background-image: radial-gradient(circle, @inner-color, @outer-color);
        background-repeat: no-repeat;
    }
    .striped(@color: rgba(255,255,255,.15); @angle: 45deg) {
        background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, @color), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, @color), color-stop(.75, @color), color-stop(.75, transparent), to(transparent));
        background-image: -webkit-linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
        background-image: -moz-linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
        background-image: linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
    }
}

// Reset filters for IE
//
// When you need to remove a gradient background, do not forget to use this to reset
// the IE filter for IE9 and below.
.reset-filter() { filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)")); }

// Retina images
//
// Short retina mixin for setting background-image and -size
.img-retina(@file-1x; @file-2x; @width-1x; @height-1x) {
    background-image: url("@{file-1x}");

    @media
    only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (   min--moz-device-pixel-ratio: 2),
    only screen and (     -o-min-device-pixel-ratio: 2/1),
    only screen and (        min-device-pixel-ratio: 2),
    only screen and (                min-resolution: 192dpi),
    only screen and (                min-resolution: 2dppx) {
        background-image: url("@{file-2x}");
        background-size: @width-1x @height-1x;
    }
}


// Responsive image
//
// Keep images from scaling beyond the width of their parents.
.img-responsive(@display: block;) {
    display: @display;
    height: auto; // Part 2: Scale the height according to the width, otherwise you get stretching
    max-width: 100%; // Part 1: Set a maximum relative to the parent
}


// Responsive utilities
// -------------------------
// More easily include all the states for responsive-utilities.less.
.responsive-visibility() { display: block !important; }
.responsive-invisibility() { & { display: none !important; } }


// Grid System
// -----------

// Centered container element
.container-fixed() {
    margin: 0 auto;
    .padding(0, @quarter-spacing-unit);
    @media (min-width: @screen-m-min) { .padding(0, @half-spacing-unit); }
    .cf();
}

// Creates a wrapper for a series of columns
.make-row(@gutter: @grid-gutter-width) {
    .margin(0);
    .cf();
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `@grid-columns`.
.grid-make-columns() {
    // Common styles for all sizes of grid columns, widths 1-12
    .grid(@index) when (@index = 1) { // initial
        @item: ~".grid-s-@{index}, .grid-m-@{index}, .grid-l-@{index}, .grid-w-@{index}";
        .grid(@index + 1, @item);
    }
    .grid(@index, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
        @item: ~".grid-s-@{index}, .grid-m-@{index}, .grid-l-@{index}, .grid-w-@{index}";
        .grid(@index + 1, ~"@{list}, @{item}");
    }
    .grid(@index, @list) when (@index > @grid-columns) { // terminal
        @{list} {
            float: left;
            position: relative;
            // Prevent columns from collapsing when empty
            min-height: 1px;
            // Inner gutter via padding
            .padding(0, (@grid-gutter-width / 4));
            @media (min-width: @screen-m-min) { .padding(0, (@grid-gutter-width / 2)); }
        }
    }
    .grid(1); // kickstart it
}

.grid-make(@index, @class, @type) when (@type = width) and (@index > 0) {
    .grid-@{class}-@{index} {
        width: percentage((@index / @grid-columns));
    }
}

.grid-make(@index, @class, @type) when (@type = push) {
    .grid-@{class}-push-@{index} {
        left: percentage((@index / @grid-columns));
    }
}

.grid-make(@index, @class, @type) when (@type = pull) {
    .grid-@{class}-pull-@{index} {
        right: percentage((@index / @grid-columns));
    }
}

.grid-make(@index, @class, @type) when (@type = offset) {
    .grid-@{class}-offset-@{index} {
        margin-left: percentage((@index / @grid-columns));
    }
}

// Basic looping in LESS
.grid-build(@cols, @class, @type, @i: 1) when (@i <= @cols) {
    .grid-make(@i, @class, @type);
    // next iteration
    .grid-build(@cols, @class, @type, @i + 1);
}

// Form control focus state
//
// Generate a customized focus state and for any input with the specified color,
// which defaults to the `@input-focus-border` variable.
//
// We highly encourage you to not customize the default value, but instead use
// this to tweak colors on an as-needed basis. This aesthetic change is based on
// WebKit's default styles, but applicable to a wider range of browsers. Its
// usability and accessibility should be taken into account with any change.
//
// Example usage: change the default blue border and shadow to white for better
// contrast against a dark gray background.

.form-control-focus(@color: @base-link-color) {
    .form-group.focus &,
    &:focus {
        border-color: @color;
        outline: 0;
        .box-shadow(none);
        .placeholder(@color);
    }
}


// Color Variantes
.color(@bg-color, @text-color: @white, @bg-hover-color: darken(@bg-color, 8%), @bg-active-color: mix(@bg-color, black, 85%), @bg-hover-color-clear: @bg-color) {
    &,
    &.label,
    &.label[href],
    a &.label,
    &.badge,
    &.btn {
        background-color: @bg-color;
        color: @text-color;
    }

    &[href],
    &.icon,
    &.octicons,
    &.clear {
        background-color: transparent;
        color: @bg-color;
    }
    &.clear, &.btn.clear { border: 2px solid @bg-color; }
    &.btn.clear { color: @bg-color; }

    &[href]:hover {
        background-color: transparent;
        color: @bg-hover-color;
    }

    &.label[href]:hover,
    a &.label:hover,
    &.btn.clear:hover,
    &.btn.clear:focus {
        background-color: @bg-hover-color;
        color: @text-color;
    }
    &.btn.clear:hover, &.btn.clear:focus { border-color: @bg-hover-color; }

    &.btn:hover {
        background-color: darken(@bg-color, 8%);
        color: @text-color;
    }

    &.btn.clear:active,
    &.btn.clear.active {
        background-color: @bg-active-color;
        border-color: @bg-active-color;
    }
}

.btn-social(@btn-color, @mix: @white, @percent: 70%, @btn-color2: @btn-color) {
    background-color: @btn-color2 !important;
    &:hover { background-color: mix(@btn-color, @mix, @percent) !important; }
    &.btn-clear {
        background: none !important;
        border: 2px solid @btn-color !important;
        color: @btn-color !important;

        .padding(@half-spacing-unit, @half-spacing-unit+@quarter-spacing-unit);

        &:hover, &:focus {
            background: @btn-color !important;
            color: @white !important;
        }
        &:active, &.active {
            border-color: mix(@btn-color, black, 85%) !important;
            background: mix(@btn-color, black, 85%) !important;
            color: rgba(255, 255, 255, 0.75);
            .box-shadow(none);
        }
    }
}

// Em Size Mixins
@em-size: 1em;
.em(@size: @base-font-size, @base: @base-font-size) {
    @em-size: unit((@size/@base), em);
}

// generates both px and rem font sizes
.font-size(@size) {
    .em(@size);
    font-size: unit(@size, px);
    font-size: @em-size;
}

.line-height(@size){
    .em(@size);
    line-height: unit(@size, px);
    line-height: @em-size;
}

.margin(@size){ margin: unit(@size, px); }
.margin(@vertiacl, @horizontal){ margin: unit(@vertiacl, px) unit(@horizontal, px); }
.margin(@top, @horizontal, @bottom){ margin: unit(@top, px) unit(@horizontal, px) unit(@bottom, px); }
.margin(@top, @right, @bottom, @left){ margin: unit(@top, px) unit(@right, px) unit(@bottom, px) unit(@left, px); }
.margin-top(@size){ margin-top: unit(@size, px); }
.margin-right(@size){ margin-right: unit(@size, px); }
.margin-bottom(@size){ margin-bottom: unit(@size, px); }
.margin-left(@size){ margin-left: unit(@size, px); }
.margin-horizontal(@size){
    margin-left: unit(@size, px);
    margin-right: unit(@size, px);
}

.margin-horizontal(@left, @right){
    margin-left: unit(@left, px);
    margin-right: unit(@right, px);
}

.margin-vertical(@size){
    margin-top: unit(@size, px);
    margin-bottom: unit(@size, px);
}

.margin-vertical(@top, @bottom){
    margin-top: unit(@top, px);
    margin-bottom: unit(@bottom, px);
}

.padding(@size){ padding: unit(@size, px); }
.padding(@vertiacl, @horizontal){ padding: unit(@vertiacl, px) unit(@horizontal, px); }
.padding(@top, @horizontal, @bottom){ padding: unit(@top, px) unit(@horizontal, px) unit(@bottom, px); }
.padding(@top, @right, @bottom, @left){ padding: unit(@top, px) unit(@right, px) unit(@bottom, px) unit(@left, px); }
.padding-top(@size){ padding-top: unit(@size, px); }
.padding-right(@size){ padding-right: unit(@size, px); }
.padding-bottom(@size){ padding-bottom: unit(@size, px); }
.padding-left(@size){ padding-left: unit(@size, px); }
.padding-horizontal(@size){
    padding-left: unit(@size, px);
    padding-right: unit(@size, px);
}

.padding-horizontal(@left, @right){
    padding-left: unit(@left, px);
    padding-right: unit(@right, px);
}

.padding-vertical(@size){
    padding-top: unit(@size, px);
    padding-bottom: unit(@size, px);
}

.padding-vertical(@top, @bottom){
    padding-top: unit(@top, px);
    padding-bottom: unit(@bottom, px);
}

