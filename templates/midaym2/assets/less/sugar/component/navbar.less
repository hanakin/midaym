/*------------------------------------*\
    $COMPONENT-NAVBAR
\*------------------------------------*/

/**
 * Navbar Wrapper Class
 * Provide a static navbar from which we expand to create full-width, fixed, an
 * other navbar variations.
 */
.navbar {    
    .margin-vertical(@base-spacing-unit);
    min-height: unit(@navbar-height, px); // Ensure a navbar always shows (e.g., without a .navbar-brand in collapsed mode)
    position: relative;
    
    // Prevent floats from breaking the navbar
    .cf();
    
    @media (min-width: @screen-m-min) { border-radius: unit(@navbar-border-radius, px); }
}

/**
 * Navbar Heading
 * Groups `.navbar-brand` and `.navbar-toggle` into a single component for easy
 * styling of responsive aspects.
 */
.navbar-header {
    .cf();

    @media (min-width: @screen-m-min) { float: left; }
}

/**
 *  Navbar collapse (body)
 * 
 * Group your navbar content into this for easy collapsing and expanding across
 * various device sizes. By default, this content is collapsed when <768px, but
 * will expand past that for a horizontal display.
 * 
 * To start (on mobile devices) the navbar links, forms, and buttons are stacked
 * vertically and include a `max-height` to overflow in case you have too much
 * content for the user's viewport.
 */
.navbar-collapse {
    max-height: 340px;
    overflow-x: visible;
    -webkit-overflow-scrolling: touch;
    .padding-horizontal(@base-spacing-unit);
    
    .cf();

    @media (min-width: @screen-m-min) {
        width: auto;
        
        &.collapse {
            display: block !important;
            height: auto !important;
            padding-bottom: 0; // Override default setting
            overflow: visible !important;
        }

        // Account for first and last children spacing
        .navbar-nav.navbar-left:first-child { .margin-left(-@base-spacing-unit); }
        .navbar-nav.navbar-right:last-child { .margin-right(@base-spacing-unit); }
        .navbar-text:last-child { margin-right: 0; }
    }
}

/**
 *  Fix the top/bottom navbars when screen real estate supports it
 */
.navbar-fixed-top, .navbar-fixed-bottom {    
    left: 0;
    position: fixed;
    right: 0;
    
    // Undo the rounded corners
    @media (min-width: @screen-m-min) { border-radius: 0; }
}

.navbar-fixed-top { top: 0; }

.navbar-fixed-bottom {
    bottom: 0;
    margin-bottom: 0; // override .navbar defaults
}

/**
 * Brand/project name
 */
.navbar-brand {
    .font-size(@gamma);
    .line-height(@base-line-height);

    color: @navbar-default-brand-color;

    float: left;
    .padding(@base-spacing-unit, @half-spacing-unit, 0);
    
    &:hover,
    &:focus { 
        text-decoration: none;
        backgroun-color: @navbar-default-brand-hover-bg;
    }

    @media (min-width: @screen-m-min) { .navbar > .container & { .margin-left(-@half-spacing-unit); } }
}

/**
 *  Navbar toggle
 * 
 *  Custom button for toggling the `.navbar-collapse`, powered by the collapse
 *  JavaScript plugin.
 */
.navbar-toggle {
    background-color: transparent;
    border: 1px solid transparent;
    border-radius: unit(@base-radius, px);
    
    float: right;
    .margin-right(@half-spacing-unit);
    .margin-vertical(@gamma);
    padding: 9px 10px;
    position: relative;
    
    // Bars
    .icon-bar {
        display: block;
        width: 22px;
        height: 2px;
        border-radius: 1px;
    }
    
    .icon-bar + .icon-bar { margin-top: 4px; }
    @media (min-width: @screen-m-min) { display: none; }
}

/**
 *  Navbar nav links
 * 
 *  Builds on top of the `.nav` components with it's own modifier class to make
 *  the nav the full height of the horizontal nav (above 768px).
 */
.navbar-nav {
    .margin(@base-spacing-unit, @half-spacing-unit, @half-spacing-unit);

    > li > a {
        color: @navbar-default-link-color;
        &:hover { 
            color: @navbar-default-link-hover-color;
            background-color: @navbar-default-link-hover-bg;
        }

        .padding(@half-spacing-unit);
        @media (min-width: @screen-l-min) { .padding(@base-spacing-unit); }
    }

    @media (min-width: @screen-s-min) {
        // Dropdowns get custom display when collapsed
        .open .dropdown-menu {
            background-color: transparent;
            border: 0;
            box-shadow: none;

            float: none;
            margin-top: 0;
            position: static;
            width: auto;
                                
            > li > a, .dropdown-header { .padding(@quarter-spacing-unit, @half-spacing-unit, @quarter-spacing-unit, @base-spacing-unit); }
            > li > a {
                .line-height(@base-line-height);
            
                &:hover,
                &:focus { background-image: none; }
            }
        }
    }

    // Uncollapse the nav
    @media (min-width: @screen-m-min) {
        float: left;

        > li {
            float: left;
            
            > a { .padding-vertical(@half-spacing-unit); }
        }
    }
}

/**
 *  Component alignment
 * 
 *  Repurpose the pull utilities as their own navbar utilities to avoid specifity
 *  issues with parents and chaining. Only do this when the navbar is uncollapsed
 *  though so that navbar contents properly stack and align in mobile.
 */
@media (min-width: @screen-m-min) {
    .navbar-left  { float: left !important; }
    .navbar-right { float: right !important; }
}

/**
 *  Navbar form
 * 
 *  Extension of the `.form-inline` with some extra flavor for optimum display in
 *  our navbars.
 */
.navbar-form {
    // Vertically center in expanded, horizontal navbar
    .margin(@half-spacing-unit, -@half-spacing-unit);
    
    .padding(@half-spacing-unit, @half-spacing-unit);
    
    // Mixin behavior for optimum display
    @media (min-width: @screen-m-min) {
        // Inline-block all the things for "inline"
        .form-group {
            // ** Text ** \\
            vertical-align: middle;
            // ** Layout ** \\
            display: inline-block;
            margin-bottom: 0;

            &:first-child { margin-left: 0; }
        }
        // Remove default margin on radios/checkboxes that were used for stacking, and
        // then undo the floating of radios and checkboxes to match (which also avoids
        // a bug in WebKit: https://github.com/twbs/bootstrap/issues/1969).
        .radio,
        .checkbox {
            display: inline-block;
            .margin(0, @eighth-spacing-unit);
            padding-left: 0;
        }

        .radio input[type="radio"],
        .checkbox input[type="checkbox"] {
            float: none;
            margin-left: 0;
            top: 0;
        }
    }

    .form-group {
        @media (max-width: @screen-s-max) { .margin-bottom(@quarter-spacing-unit); }
    }

    // Undo 100% width for pull classes
    @media (min-width: @screen-m-min) {
        .box-shadow(none);

        border: 0;
        margin-left: 0;
        margin-right: 0;
        padding-top: 0;
        padding-bottom: 0;
        width: auto;
    }
}

/**
 *  Dropdown menus
 *  Menu position and menu carets
*/
.navbar-nav > li > .dropdown-menu {
    .border-top-radius(0);

    margin-top: 0;
}

/**
 *  Menu position and menu caret support for dropups via extra dropup class
 */
.navbar-fixed-bottom .navbar-nav > li > .dropdown-menu { .border-bottom-radius(0); }

/**
 *  Right aligned menus need alt position
 */
.navbar-nav.pull-right > li > .dropdown-menu,
.navbar-nav > li > .dropdown-menu.pull-right {
    left: auto;
    right: 0;
}

/**
 *  Buttons in navbars
 * 
 *  Vertically center a button within a navbar (when *not* in a form).
 */
.navbar-btn { 
    @media (min-width: @screen-m-min) { .margin-top(-@half-spacing-unit + 1) }; 
}

/**
 *  Text in navbars
 * 
 *  Add a class to make any element properly align itself vertically within the navbars.
 */
.navbar-text {
    float: left;
    .margin-vertical(@half-spacing-unit);

    @media (min-width: @screen-m-min) { .margin-horizontal(@half-spacing-unit); }
}

